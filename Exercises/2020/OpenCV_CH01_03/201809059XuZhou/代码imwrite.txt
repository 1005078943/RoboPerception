#include <opencv2/opencv.hpp>
#include <vector>

using namespace cv;
using namespace std;

void createAlphaMat(Mat& mat)
{
	for (int i = 0; i < mat.rows; ++i) {
		for (int j = 0; j < mat.cols; ++j) {
			Vec4b& rgba = mat.at<Vec4b>(i,j);//像素读取
			rgba[0] = UCHAR_MAX;//红色设置
			//绿色设置
			rgba[1] = saturate_cast<uchar>((float(mat.cols - j)) / ((float)mat.cols) * UCHAR_MAX);
			//蓝色设置
			rgba[2] = saturate_cast<uchar>((float(mat.cols - j)) / ((float)mat.rows) * UCHAR_MAX);
			//透明度设置
			rgba[3] = saturate_cast<uchar>(0.5 * (rgba[1] + rgba[2]));
		}
	}
}
int main()
{
	Mat mat(480, 640, CV_8UC4);//第三项de第四通道为透明度
	/*    CV_<bit_depth>(S|U|F)C<number_of_channels>
1	 1--bit_depth---比特数---代表8bite,16bites,32bites,64bites---举个例子吧--比如说,如
        如果你现在创建了一个存储--灰度图片的Mat对象,这个图像的大小为宽100,高100,那么,现在这张
        灰度图片中有10000个像素点，它每一个像素点在内存空间所占的空间大小是8bite,8位--所以它对
        应的就是CV_8
     2--S|U|F--S--代表---signed int---有符号整形
               U--代表--unsigned int--无符号整形
               F--代表--float---------单精度浮点型
     3--C<number_of_channels>----代表---一张图片的通道数,比如:
         1--灰度图片--grayImg---是--单通道图像
         2--RGB彩色图像---------是--3通道图像
         3--带Alph通道的RGB图像--是--4通道图像
1*/
	createAlphaMat(mat);//像素设置
	vector<int>compression_params;
	compression_params.push_back(IMWRITE_PNG_COMPRESSION);//格式符号
	compression_params.push_back(9);//相片质量
	try {
		imwrite("toumingtu.png", mat, compression_params);//以设置的格式保存
		imshow("shenxhen.png", mat);//显示图片
		fprintf(stdout, "pngalphasave\nimwrite:img\n");//输出提示文件信息
		waitKey(0);
	}
	catch (runtime_error& ex) {
		fprintf(stderr, "err: %s\n", ex.what());//异常报错
		return 1;
	}
	return 0;
}